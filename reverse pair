class Solution {

     private static void merge(int[] arr, int low, int mid, int high) {
        ArrayList<Integer> temp = new ArrayList<>(); // temporary array
        int left = low;      // starting index of left half of arr
        int right = mid + 1;   // starting index of right half of arr

        //storing elements in the temporary array in a sorted manner//

        while (left <= mid && right <= high) {
            if (arr[left] <= arr[right]) {
                temp.add(arr[left]);
                left++;
            } else {
                temp.add(arr[right]);
                right++;
            }
        }

        // if elements on the left half are still left //

        while (left <= mid) {
            temp.add(arr[left]);
            left++;
        }

        //  if elements on the right half are still left //
        while (right <= high) {
            temp.add(arr[right]);
            right++;
        }

        


        // transfering all elements from temporary to arr //
        for (int i = low; i <= high; i++) {
            arr[i] = temp.get(i - low);
        }
    }
    public static int  countpairs(int arr[],int left,int mid,int right){
        int count=0;
        int low=left;
        int high=mid+1;
         for(int i=low;i<=mid;i++){
            while(high<=right && arr[i]>2*arr[high]){
                high++;
            }
            count+=high-(mid+1);
        }
        return count;

    }

    public static int mergeSort(int[] arr, int low, int high) {
        int count=0;
        if (low >= high) return count;
        int mid = (low + high) / 2 ;
       count+= mergeSort(arr, low, mid);  // left half
        count+=mergeSort(arr, mid + 1, high); // right half
        count+=countpairs(arr,low,mid,high);
        merge(arr, low, mid, high); 
        return count; // merging sorted halves
    }
   
    public int reversePairs(int[] nums) {
       
        
        return mergeSort(nums,0,nums.length-1);
       
        
    }
}
